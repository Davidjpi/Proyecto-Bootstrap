Comandos para GIT BASH

CREAR ALIAS PARA LOS COMANDOS (Ej: renombra el comando log)

git config --global alias.l "log" (alias.algo renombra el comando con la palabra "algo")


CONFIGURACIÓN USUARIO

git config --global user.email sam@google.com

NUEVO REPOSITORIO

git init

AGREGAR ARCHIVOS AL INDEX

git add temp.txt
git add . (PARA AGREGAR TODOS LOS ARCHIVOS)

CREAR COPIA DE REPOSITORIO

git clone alex@93.188.160.58:/path/to/repository (CREAR COPIA EN SERVIDOR)
git clone /path/to/repository  (CREAR COPIA EN LOCAL)

CAMBIAR LA CABECERA
git commit –m “Message to go with the commit here”
git commit --amend -m "Message to go with the commit here" (--amend para modificar el mensaje del commit anterior)


LISTA DE ARCHIVOS QUE SE HAN CAMBIADO. ESTÁN PARA SER AÑADIDOS O COMPROMETIDOS
git status

git push
Este es uno de los comandos más básicos. Un simple push envía los cambios que se han hecho en la rama principal de los repertorios remotos que están asociados con el directorio que está trabajando. Por ejemplo:
git push  origin master
git checkout
El comando checkout se puede usar para crear ramas o cambiar entre ellas. Por ejemplo, el siguiente comando crea una nueva y se cambia a ella:
command git checkout -b <banch-name>
Para cambiar de una rama a otra solo usa:

git checkout <branch-name>
git remote
El comando git se usa para conectar a un repositorio remoto. El siguiente comando muestra los repositorios remotos que están configurados actualmente:
git remote -v
Este comando te permite conectar al usuario con el repositorio local a un servidor remoto:

git remote add origin <93.188.160.58>
git branch
Este comando se usa para listar, crear o borrar ramas. Para listar todas las ramas se usa:
git branch

para borrar la rama:

git branch -d <branch-name>
git pull
Para poder fusionar todos los cambios que se han hecho en el repositorio local trabajando, el comando que se usa es:
git pull
git merge
Este comando se usa para fusionar una rama con otra rama activa:
git merge <branch-name>
git diff
Este comando se usa para hacer una lista de conflictos. Para poder ver conflictos con el archivo base usa:
git diff --base <file-name>
El siguiente comando se usa para ver los conflictos que hay entre ramas que están por ser fusionadas para poder fusionarlas sin problemas:

git diff <source-branch> <target-branch>
Para solo ver una lista de todos los conflictos presentes usa:

git diff
git tag
Etiquetar se usa para marcar commits específicos con asas simples. Por ejemplo:
git tag 1.1.0 <instert-commitID-here>

LOG DE COMMITS

git log

LOG HISTORICO DE COMMITS (INCLUYE COMMITS BORRADOS)

git reflog

RESETEAR Y RESTAURAR EL DIRECTORIO AL ÚLTIMO ESTADO COMPROMETIDO

git reset --hard HEAD (--hard Recupera los archivos y vuelve al punto indicado)
git reset --soft HEAD (--soft Vuelve al punto indicado, pero no recupera los archivos)

BORRAR ARCHIVOS DEL DIRECTORIO DONDE ESTÁS TRABAJANDO

git rm filename.txt

CAMBIAR NOMBRE

git mv filename.txt fileNameNew.txt

git stash
Este es uno de los comandos menos conocidos, pero ayuda a salvar cambios que no están por ser comprometidos inmediatamente, pero temporalmente:
git stash
git show
Se usa para mostrar información sobre cualquier objeto git. Por ejemplo:
git show
git fetch
Este comando le permite al usuario buscar todos los objetos de un repositorio remoto que actualmente no reside en el directorio local que está trabajando. Por ejemplo:
git fetch origin
git ls-tree
Para ver un objeto de árbol junto con el nombre y modo de cada uno de ellos, y el valor blob´s SHA-1, se usa:
git ls-tree HEAD
git cat-file
Usando el valor SHA-1, se puede ver el tipo de objeto usando este comando. Por ejemplo:
git cat-file –p d670460b4b4aece5915caf5c68d12f560a9fe3e4
git grep
Este comando le permite al usuario buscar en los árboles de contenido cualquier frase o palabra. Por ejemplo, para buscar por www.tupaginaweb.com en todos los archivos se usaría:
git grep “www.tupaginaweb.com”
gitk
Este es la interfaz gráfica para un repositorio local que puede invocar escribiendo y ejecutando:
gitk
git instaweb
Con este comando un servidor web puede correr interconectado con el repositorio local. Un navegador web también está automáticamente dirigido a el:
git instaweb –http=webrick
git gc
Para optimizar el repositorio por medio de una recolección de basura, que limpiara archivos innecesarios y los optimizara, usa:git hc
git archive
Este comando le permite al usuario crear archivos zip o tar que contengan los constituyentes de un solo árbol de repositorio:git archive – -format=tar master
git prune
Con este comando los objetos que no tengan ningún puntero entrante serán eliminados:git prune
git fsck
Para poder hacer un chequeo de integridad del sistema de archivos git, usa este comando. Cualquier objeto corrompido será detectado:git fsck
git rebase
Este comando se usa para la re aplicación de los compromisos en otra rama. Por ejemplo:git rebase master